#!/usr/bin/python

import argparse
import csv
import sys

def run(files):
    data = load_data(files)
    joined = join_data(data, len(files))
    sort_joined(joined)
    write_joined(joined)

def load_data(files):
    data = {}
    for spec in files:
        file_name, weight = parse_spec(spec)
        for name, team, position, rank in read_csv(file_name):
            ranks = data.setdefault((name, team, position), [])
            ranks.append((float(rank), weight))
    return data

def parse_spec(spec):
    parts = spec.split(':')
    if len(parts) == 1:
        return parts[0], 1.0
    elif len(parts) == 2:
        try:
            return parts[0], float(parts[1])
        except ValueError:
            print 'Weight must be a number'
            sys.exit(1)
    else:
        print 'File spec must be FILE[:WEIGHT]'
        sys.exit(1)

def read_csv(file_name):
    with open(file_name, 'r') as f:
        reader = csv.reader(f)
        for row in reader:
            yield row

def join_data(data, source_count):
    joined = []
    for ((name, team, position), ranks) in data.items():
        if len(ranks) < source_count:
            sys.stderr.write("**************** %s (%i)\n" % (name, len(ranks)))
        joined_rank = join_ranks(ranks)
        if joined_rank is not None:
            joined.append([name, team, position, joined_rank])
    return joined

def join_ranks(ranks):
    joined = 0
    weight_total = sum([weight for _rank, weight in ranks])
    if weight_total == 0:
        return None
    for rank, weight in ranks:
        joined = joined + (rank * (weight / weight_total))
    return joined

def sort_joined(joined):
    joined.sort(lambda a, b: cmp(a[3], b[3]))

def write_joined(joined):
    out = csv.writer(sys.stdout)
    for name, team, position, rank in joined:
        out.writerow([name, team, position, '%0.2f' % rank])

if __name__ == '__main__':
    p = argparse.ArgumentParser()
    p.add_argument('files', metavar='FILE[:WEIGHT]', nargs='+',
                   help="Files to join - WEIGHT is 1 by default")

    args = p.parse_args()
    run(args.files)
